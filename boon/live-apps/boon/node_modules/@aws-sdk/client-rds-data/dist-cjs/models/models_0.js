"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecuteSqlResponseFilterSensitiveLog = exports.SqlStatementResultFilterSensitiveLog = exports.ResultFrameFilterSensitiveLog = exports.ExecuteStatementResponseFilterSensitiveLog = exports._RecordFilterSensitiveLog = exports.BatchExecuteStatementResponseFilterSensitiveLog = exports.BatchExecuteStatementRequestFilterSensitiveLog = exports.StructValueFilterSensitiveLog = exports.ExecuteStatementRequestFilterSensitiveLog = exports.ValueFilterSensitiveLog = exports.UpdateResultFilterSensitiveLog = exports.SqlParameterFilterSensitiveLog = exports.FieldFilterSensitiveLog = exports.ArrayValueFilterSensitiveLog = exports.RollbackTransactionResponseFilterSensitiveLog = exports.RollbackTransactionRequestFilterSensitiveLog = exports.ResultSetOptionsFilterSensitiveLog = exports.ResultSetMetadataFilterSensitiveLog = exports.ExecuteSqlRequestFilterSensitiveLog = exports.CommitTransactionResponseFilterSensitiveLog = exports.CommitTransactionRequestFilterSensitiveLog = exports.ColumnMetadataFilterSensitiveLog = exports.BeginTransactionResponseFilterSensitiveLog = exports.BeginTransactionRequestFilterSensitiveLog = exports.Value = exports.Field = exports.ArrayValue = exports.LongReturnType = exports.RecordsFormatType = exports.DecimalReturnType = exports.NotFoundException = exports.StatementTimeoutException = exports.ServiceUnavailableError = exports.InternalServerErrorException = exports.ForbiddenException = exports.TypeHint = exports.BadRequestException = exports.AccessDeniedException = void 0;
const RDSDataServiceException_1 = require("./RDSDataServiceException");
class AccessDeniedException extends RDSDataServiceException_1.RDSDataServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
exports.AccessDeniedException = AccessDeniedException;
class BadRequestException extends RDSDataServiceException_1.RDSDataServiceException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
    }
}
exports.BadRequestException = BadRequestException;
var TypeHint;
(function (TypeHint) {
    TypeHint["DATE"] = "DATE";
    TypeHint["DECIMAL"] = "DECIMAL";
    TypeHint["JSON"] = "JSON";
    TypeHint["TIME"] = "TIME";
    TypeHint["TIMESTAMP"] = "TIMESTAMP";
    TypeHint["UUID"] = "UUID";
})(TypeHint = exports.TypeHint || (exports.TypeHint = {}));
class ForbiddenException extends RDSDataServiceException_1.RDSDataServiceException {
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        this.name = "ForbiddenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ForbiddenException.prototype);
    }
}
exports.ForbiddenException = ForbiddenException;
class InternalServerErrorException extends RDSDataServiceException_1.RDSDataServiceException {
    constructor(opts) {
        super({
            name: "InternalServerErrorException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerErrorException.prototype);
    }
}
exports.InternalServerErrorException = InternalServerErrorException;
class ServiceUnavailableError extends RDSDataServiceException_1.RDSDataServiceException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableError",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableError";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableError.prototype);
    }
}
exports.ServiceUnavailableError = ServiceUnavailableError;
class StatementTimeoutException extends RDSDataServiceException_1.RDSDataServiceException {
    constructor(opts) {
        super({
            name: "StatementTimeoutException",
            $fault: "client",
            ...opts,
        });
        this.name = "StatementTimeoutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, StatementTimeoutException.prototype);
        this.dbConnectionId = opts.dbConnectionId;
    }
}
exports.StatementTimeoutException = StatementTimeoutException;
class NotFoundException extends RDSDataServiceException_1.RDSDataServiceException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
    }
}
exports.NotFoundException = NotFoundException;
var DecimalReturnType;
(function (DecimalReturnType) {
    DecimalReturnType["DOUBLE_OR_LONG"] = "DOUBLE_OR_LONG";
    DecimalReturnType["STRING"] = "STRING";
})(DecimalReturnType = exports.DecimalReturnType || (exports.DecimalReturnType = {}));
var RecordsFormatType;
(function (RecordsFormatType) {
    RecordsFormatType["JSON"] = "JSON";
    RecordsFormatType["NONE"] = "NONE";
})(RecordsFormatType = exports.RecordsFormatType || (exports.RecordsFormatType = {}));
var LongReturnType;
(function (LongReturnType) {
    LongReturnType["LONG"] = "LONG";
    LongReturnType["STRING"] = "STRING";
})(LongReturnType = exports.LongReturnType || (exports.LongReturnType = {}));
var ArrayValue;
(function (ArrayValue) {
    ArrayValue.visit = (value, visitor) => {
        if (value.booleanValues !== undefined)
            return visitor.booleanValues(value.booleanValues);
        if (value.longValues !== undefined)
            return visitor.longValues(value.longValues);
        if (value.doubleValues !== undefined)
            return visitor.doubleValues(value.doubleValues);
        if (value.stringValues !== undefined)
            return visitor.stringValues(value.stringValues);
        if (value.arrayValues !== undefined)
            return visitor.arrayValues(value.arrayValues);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ArrayValue = exports.ArrayValue || (exports.ArrayValue = {}));
var Field;
(function (Field) {
    Field.visit = (value, visitor) => {
        if (value.isNull !== undefined)
            return visitor.isNull(value.isNull);
        if (value.booleanValue !== undefined)
            return visitor.booleanValue(value.booleanValue);
        if (value.longValue !== undefined)
            return visitor.longValue(value.longValue);
        if (value.doubleValue !== undefined)
            return visitor.doubleValue(value.doubleValue);
        if (value.stringValue !== undefined)
            return visitor.stringValue(value.stringValue);
        if (value.blobValue !== undefined)
            return visitor.blobValue(value.blobValue);
        if (value.arrayValue !== undefined)
            return visitor.arrayValue(value.arrayValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Field = exports.Field || (exports.Field = {}));
var Value;
(function (Value) {
    Value.visit = (value, visitor) => {
        if (value.isNull !== undefined)
            return visitor.isNull(value.isNull);
        if (value.bitValue !== undefined)
            return visitor.bitValue(value.bitValue);
        if (value.bigIntValue !== undefined)
            return visitor.bigIntValue(value.bigIntValue);
        if (value.intValue !== undefined)
            return visitor.intValue(value.intValue);
        if (value.doubleValue !== undefined)
            return visitor.doubleValue(value.doubleValue);
        if (value.realValue !== undefined)
            return visitor.realValue(value.realValue);
        if (value.stringValue !== undefined)
            return visitor.stringValue(value.stringValue);
        if (value.blobValue !== undefined)
            return visitor.blobValue(value.blobValue);
        if (value.arrayValues !== undefined)
            return visitor.arrayValues(value.arrayValues);
        if (value.structValue !== undefined)
            return visitor.structValue(value.structValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Value = exports.Value || (exports.Value = {}));
const BeginTransactionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BeginTransactionRequestFilterSensitiveLog = BeginTransactionRequestFilterSensitiveLog;
const BeginTransactionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BeginTransactionResponseFilterSensitiveLog = BeginTransactionResponseFilterSensitiveLog;
const ColumnMetadataFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ColumnMetadataFilterSensitiveLog = ColumnMetadataFilterSensitiveLog;
const CommitTransactionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CommitTransactionRequestFilterSensitiveLog = CommitTransactionRequestFilterSensitiveLog;
const CommitTransactionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CommitTransactionResponseFilterSensitiveLog = CommitTransactionResponseFilterSensitiveLog;
const ExecuteSqlRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ExecuteSqlRequestFilterSensitiveLog = ExecuteSqlRequestFilterSensitiveLog;
const ResultSetMetadataFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ResultSetMetadataFilterSensitiveLog = ResultSetMetadataFilterSensitiveLog;
const ResultSetOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ResultSetOptionsFilterSensitiveLog = ResultSetOptionsFilterSensitiveLog;
const RollbackTransactionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RollbackTransactionRequestFilterSensitiveLog = RollbackTransactionRequestFilterSensitiveLog;
const RollbackTransactionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RollbackTransactionResponseFilterSensitiveLog = RollbackTransactionResponseFilterSensitiveLog;
const ArrayValueFilterSensitiveLog = (obj) => {
    if (obj.booleanValues !== undefined)
        return { booleanValues: obj.booleanValues };
    if (obj.longValues !== undefined)
        return { longValues: obj.longValues };
    if (obj.doubleValues !== undefined)
        return { doubleValues: obj.doubleValues };
    if (obj.stringValues !== undefined)
        return { stringValues: obj.stringValues };
    if (obj.arrayValues !== undefined)
        return { arrayValues: obj.arrayValues.map((item) => (0, exports.ArrayValueFilterSensitiveLog)(item)) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
exports.ArrayValueFilterSensitiveLog = ArrayValueFilterSensitiveLog;
const FieldFilterSensitiveLog = (obj) => {
    if (obj.isNull !== undefined)
        return { isNull: obj.isNull };
    if (obj.booleanValue !== undefined)
        return { booleanValue: obj.booleanValue };
    if (obj.longValue !== undefined)
        return { longValue: obj.longValue };
    if (obj.doubleValue !== undefined)
        return { doubleValue: obj.doubleValue };
    if (obj.stringValue !== undefined)
        return { stringValue: obj.stringValue };
    if (obj.blobValue !== undefined)
        return { blobValue: obj.blobValue };
    if (obj.arrayValue !== undefined)
        return { arrayValue: (0, exports.ArrayValueFilterSensitiveLog)(obj.arrayValue) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
exports.FieldFilterSensitiveLog = FieldFilterSensitiveLog;
const SqlParameterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.value && { value: (0, exports.FieldFilterSensitiveLog)(obj.value) }),
});
exports.SqlParameterFilterSensitiveLog = SqlParameterFilterSensitiveLog;
const UpdateResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.generatedFields && { generatedFields: obj.generatedFields.map((item) => (0, exports.FieldFilterSensitiveLog)(item)) }),
});
exports.UpdateResultFilterSensitiveLog = UpdateResultFilterSensitiveLog;
const ValueFilterSensitiveLog = (obj) => {
    if (obj.isNull !== undefined)
        return { isNull: obj.isNull };
    if (obj.bitValue !== undefined)
        return { bitValue: obj.bitValue };
    if (obj.bigIntValue !== undefined)
        return { bigIntValue: obj.bigIntValue };
    if (obj.intValue !== undefined)
        return { intValue: obj.intValue };
    if (obj.doubleValue !== undefined)
        return { doubleValue: obj.doubleValue };
    if (obj.realValue !== undefined)
        return { realValue: obj.realValue };
    if (obj.stringValue !== undefined)
        return { stringValue: obj.stringValue };
    if (obj.blobValue !== undefined)
        return { blobValue: obj.blobValue };
    if (obj.arrayValues !== undefined)
        return { arrayValues: obj.arrayValues.map((item) => (0, exports.ValueFilterSensitiveLog)(item)) };
    if (obj.structValue !== undefined)
        return { structValue: (0, exports.StructValueFilterSensitiveLog)(obj.structValue) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
exports.ValueFilterSensitiveLog = ValueFilterSensitiveLog;
const ExecuteStatementRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.parameters && { parameters: obj.parameters.map((item) => (0, exports.SqlParameterFilterSensitiveLog)(item)) }),
});
exports.ExecuteStatementRequestFilterSensitiveLog = ExecuteStatementRequestFilterSensitiveLog;
const StructValueFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.attributes && { attributes: obj.attributes.map((item) => (0, exports.ValueFilterSensitiveLog)(item)) }),
});
exports.StructValueFilterSensitiveLog = StructValueFilterSensitiveLog;
const BatchExecuteStatementRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.parameterSets && {
        parameterSets: obj.parameterSets.map((item) => item.map((item) => (0, exports.SqlParameterFilterSensitiveLog)(item))),
    }),
});
exports.BatchExecuteStatementRequestFilterSensitiveLog = BatchExecuteStatementRequestFilterSensitiveLog;
const BatchExecuteStatementResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.updateResults && { updateResults: obj.updateResults.map((item) => (0, exports.UpdateResultFilterSensitiveLog)(item)) }),
});
exports.BatchExecuteStatementResponseFilterSensitiveLog = BatchExecuteStatementResponseFilterSensitiveLog;
const _RecordFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.values && { values: obj.values.map((item) => (0, exports.ValueFilterSensitiveLog)(item)) }),
});
exports._RecordFilterSensitiveLog = _RecordFilterSensitiveLog;
const ExecuteStatementResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.records && { records: obj.records.map((item) => item.map((item) => (0, exports.FieldFilterSensitiveLog)(item))) }),
    ...(obj.generatedFields && { generatedFields: obj.generatedFields.map((item) => (0, exports.FieldFilterSensitiveLog)(item)) }),
});
exports.ExecuteStatementResponseFilterSensitiveLog = ExecuteStatementResponseFilterSensitiveLog;
const ResultFrameFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.records && { records: obj.records.map((item) => (0, exports._RecordFilterSensitiveLog)(item)) }),
});
exports.ResultFrameFilterSensitiveLog = ResultFrameFilterSensitiveLog;
const SqlStatementResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SqlStatementResultFilterSensitiveLog = SqlStatementResultFilterSensitiveLog;
const ExecuteSqlResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ExecuteSqlResponseFilterSensitiveLog = ExecuteSqlResponseFilterSensitiveLog;
