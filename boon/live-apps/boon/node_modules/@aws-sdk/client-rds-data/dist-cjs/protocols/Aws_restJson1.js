"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeAws_restJson1RollbackTransactionCommand = exports.deserializeAws_restJson1ExecuteStatementCommand = exports.deserializeAws_restJson1ExecuteSqlCommand = exports.deserializeAws_restJson1CommitTransactionCommand = exports.deserializeAws_restJson1BeginTransactionCommand = exports.deserializeAws_restJson1BatchExecuteStatementCommand = exports.serializeAws_restJson1RollbackTransactionCommand = exports.serializeAws_restJson1ExecuteStatementCommand = exports.serializeAws_restJson1ExecuteSqlCommand = exports.serializeAws_restJson1CommitTransactionCommand = exports.serializeAws_restJson1BeginTransactionCommand = exports.serializeAws_restJson1BatchExecuteStatementCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const models_0_1 = require("../models/models_0");
const RDSDataServiceException_1 = require("../models/RDSDataServiceException");
const serializeAws_restJson1BatchExecuteStatementCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/BatchExecute";
    let body;
    body = JSON.stringify({
        ...(input.database != null && { database: input.database }),
        ...(input.parameterSets != null && {
            parameterSets: serializeAws_restJson1SqlParameterSets(input.parameterSets, context),
        }),
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
        ...(input.schema != null && { schema: input.schema }),
        ...(input.secretArn != null && { secretArn: input.secretArn }),
        ...(input.sql != null && { sql: input.sql }),
        ...(input.transactionId != null && { transactionId: input.transactionId }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1BatchExecuteStatementCommand = serializeAws_restJson1BatchExecuteStatementCommand;
const serializeAws_restJson1BeginTransactionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/BeginTransaction";
    let body;
    body = JSON.stringify({
        ...(input.database != null && { database: input.database }),
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
        ...(input.schema != null && { schema: input.schema }),
        ...(input.secretArn != null && { secretArn: input.secretArn }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1BeginTransactionCommand = serializeAws_restJson1BeginTransactionCommand;
const serializeAws_restJson1CommitTransactionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/CommitTransaction";
    let body;
    body = JSON.stringify({
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
        ...(input.secretArn != null && { secretArn: input.secretArn }),
        ...(input.transactionId != null && { transactionId: input.transactionId }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CommitTransactionCommand = serializeAws_restJson1CommitTransactionCommand;
const serializeAws_restJson1ExecuteSqlCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/ExecuteSql";
    let body;
    body = JSON.stringify({
        ...(input.awsSecretStoreArn != null && { awsSecretStoreArn: input.awsSecretStoreArn }),
        ...(input.database != null && { database: input.database }),
        ...(input.dbClusterOrInstanceArn != null && { dbClusterOrInstanceArn: input.dbClusterOrInstanceArn }),
        ...(input.schema != null && { schema: input.schema }),
        ...(input.sqlStatements != null && { sqlStatements: input.sqlStatements }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1ExecuteSqlCommand = serializeAws_restJson1ExecuteSqlCommand;
const serializeAws_restJson1ExecuteStatementCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/Execute";
    let body;
    body = JSON.stringify({
        ...(input.continueAfterTimeout != null && { continueAfterTimeout: input.continueAfterTimeout }),
        ...(input.database != null && { database: input.database }),
        ...(input.formatRecordsAs != null && { formatRecordsAs: input.formatRecordsAs }),
        ...(input.includeResultMetadata != null && { includeResultMetadata: input.includeResultMetadata }),
        ...(input.parameters != null && { parameters: serializeAws_restJson1SqlParametersList(input.parameters, context) }),
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
        ...(input.resultSetOptions != null && {
            resultSetOptions: serializeAws_restJson1ResultSetOptions(input.resultSetOptions, context),
        }),
        ...(input.schema != null && { schema: input.schema }),
        ...(input.secretArn != null && { secretArn: input.secretArn }),
        ...(input.sql != null && { sql: input.sql }),
        ...(input.transactionId != null && { transactionId: input.transactionId }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1ExecuteStatementCommand = serializeAws_restJson1ExecuteStatementCommand;
const serializeAws_restJson1RollbackTransactionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/RollbackTransaction";
    let body;
    body = JSON.stringify({
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
        ...(input.secretArn != null && { secretArn: input.secretArn }),
        ...(input.transactionId != null && { transactionId: input.transactionId }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1RollbackTransactionCommand = serializeAws_restJson1RollbackTransactionCommand;
const deserializeAws_restJson1BatchExecuteStatementCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1BatchExecuteStatementCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.updateResults != null) {
        contents.updateResults = deserializeAws_restJson1UpdateResults(data.updateResults, context);
    }
    return contents;
};
exports.deserializeAws_restJson1BatchExecuteStatementCommand = deserializeAws_restJson1BatchExecuteStatementCommand;
const deserializeAws_restJson1BatchExecuteStatementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rdsdata#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.rdsdata#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.rdsdata#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.rdsdata#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "ServiceUnavailableError":
        case "com.amazonaws.rdsdata#ServiceUnavailableError":
            throw await deserializeAws_restJson1ServiceUnavailableErrorResponse(parsedOutput, context);
        case "StatementTimeoutException":
        case "com.amazonaws.rdsdata#StatementTimeoutException":
            throw await deserializeAws_restJson1StatementTimeoutExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RDSDataServiceException_1.RDSDataServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1BeginTransactionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1BeginTransactionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.transactionId != null) {
        contents.transactionId = (0, smithy_client_1.expectString)(data.transactionId);
    }
    return contents;
};
exports.deserializeAws_restJson1BeginTransactionCommand = deserializeAws_restJson1BeginTransactionCommand;
const deserializeAws_restJson1BeginTransactionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rdsdata#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.rdsdata#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.rdsdata#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.rdsdata#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "ServiceUnavailableError":
        case "com.amazonaws.rdsdata#ServiceUnavailableError":
            throw await deserializeAws_restJson1ServiceUnavailableErrorResponse(parsedOutput, context);
        case "StatementTimeoutException":
        case "com.amazonaws.rdsdata#StatementTimeoutException":
            throw await deserializeAws_restJson1StatementTimeoutExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RDSDataServiceException_1.RDSDataServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CommitTransactionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CommitTransactionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.transactionStatus != null) {
        contents.transactionStatus = (0, smithy_client_1.expectString)(data.transactionStatus);
    }
    return contents;
};
exports.deserializeAws_restJson1CommitTransactionCommand = deserializeAws_restJson1CommitTransactionCommand;
const deserializeAws_restJson1CommitTransactionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rdsdata#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.rdsdata#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.rdsdata#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.rdsdata#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.rdsdata#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceUnavailableError":
        case "com.amazonaws.rdsdata#ServiceUnavailableError":
            throw await deserializeAws_restJson1ServiceUnavailableErrorResponse(parsedOutput, context);
        case "StatementTimeoutException":
        case "com.amazonaws.rdsdata#StatementTimeoutException":
            throw await deserializeAws_restJson1StatementTimeoutExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RDSDataServiceException_1.RDSDataServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ExecuteSqlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ExecuteSqlCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.sqlStatementResults != null) {
        contents.sqlStatementResults = deserializeAws_restJson1SqlStatementResults(data.sqlStatementResults, context);
    }
    return contents;
};
exports.deserializeAws_restJson1ExecuteSqlCommand = deserializeAws_restJson1ExecuteSqlCommand;
const deserializeAws_restJson1ExecuteSqlCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rdsdata#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.rdsdata#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.rdsdata#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.rdsdata#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "ServiceUnavailableError":
        case "com.amazonaws.rdsdata#ServiceUnavailableError":
            throw await deserializeAws_restJson1ServiceUnavailableErrorResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RDSDataServiceException_1.RDSDataServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ExecuteStatementCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ExecuteStatementCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.columnMetadata != null) {
        contents.columnMetadata = deserializeAws_restJson1Metadata(data.columnMetadata, context);
    }
    if (data.formattedRecords != null) {
        contents.formattedRecords = (0, smithy_client_1.expectString)(data.formattedRecords);
    }
    if (data.generatedFields != null) {
        contents.generatedFields = deserializeAws_restJson1FieldList(data.generatedFields, context);
    }
    if (data.numberOfRecordsUpdated != null) {
        contents.numberOfRecordsUpdated = (0, smithy_client_1.expectLong)(data.numberOfRecordsUpdated);
    }
    if (data.records != null) {
        contents.records = deserializeAws_restJson1SqlRecords(data.records, context);
    }
    return contents;
};
exports.deserializeAws_restJson1ExecuteStatementCommand = deserializeAws_restJson1ExecuteStatementCommand;
const deserializeAws_restJson1ExecuteStatementCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rdsdata#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.rdsdata#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.rdsdata#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.rdsdata#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "ServiceUnavailableError":
        case "com.amazonaws.rdsdata#ServiceUnavailableError":
            throw await deserializeAws_restJson1ServiceUnavailableErrorResponse(parsedOutput, context);
        case "StatementTimeoutException":
        case "com.amazonaws.rdsdata#StatementTimeoutException":
            throw await deserializeAws_restJson1StatementTimeoutExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RDSDataServiceException_1.RDSDataServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1RollbackTransactionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1RollbackTransactionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.transactionStatus != null) {
        contents.transactionStatus = (0, smithy_client_1.expectString)(data.transactionStatus);
    }
    return contents;
};
exports.deserializeAws_restJson1RollbackTransactionCommand = deserializeAws_restJson1RollbackTransactionCommand;
const deserializeAws_restJson1RollbackTransactionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rdsdata#AccessDeniedException":
            throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.rdsdata#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.rdsdata#ForbiddenException":
            throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.rdsdata#InternalServerErrorException":
            throw await deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.rdsdata#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceUnavailableError":
        case "com.amazonaws.rdsdata#ServiceUnavailableError":
            throw await deserializeAws_restJson1ServiceUnavailableErrorResponse(parsedOutput, context);
        case "StatementTimeoutException":
        case "com.amazonaws.rdsdata#StatementTimeoutException":
            throw await deserializeAws_restJson1StatementTimeoutExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: RDSDataServiceException_1.RDSDataServiceException,
                errorCode,
            });
    }
};
const map = smithy_client_1.map;
const deserializeAws_restJson1AccessDeniedExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1BadRequestExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ForbiddenExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1InternalServerErrorExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const exception = new models_0_1.InternalServerErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1NotFoundExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ServiceUnavailableErrorResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const exception = new models_0_1.ServiceUnavailableError({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1StatementTimeoutExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.dbConnectionId != null) {
        contents.dbConnectionId = (0, smithy_client_1.expectLong)(data.dbConnectionId);
    }
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.StatementTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const serializeAws_restJson1ArrayOfArray = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1ArrayValue(entry, context);
    });
};
const serializeAws_restJson1ArrayValue = (input, context) => {
    return models_0_1.ArrayValue.visit(input, {
        arrayValues: (value) => ({ arrayValues: serializeAws_restJson1ArrayOfArray(value, context) }),
        booleanValues: (value) => ({ booleanValues: serializeAws_restJson1BooleanArray(value, context) }),
        doubleValues: (value) => ({ doubleValues: serializeAws_restJson1DoubleArray(value, context) }),
        longValues: (value) => ({ longValues: serializeAws_restJson1LongArray(value, context) }),
        stringValues: (value) => ({ stringValues: serializeAws_restJson1StringArray(value, context) }),
        _: (name, value) => ({ name: value }),
    });
};
const serializeAws_restJson1BooleanArray = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1DoubleArray = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.serializeFloat)(entry);
    });
};
const serializeAws_restJson1Field = (input, context) => {
    return models_0_1.Field.visit(input, {
        arrayValue: (value) => ({ arrayValue: serializeAws_restJson1ArrayValue(value, context) }),
        blobValue: (value) => ({ blobValue: context.base64Encoder(value) }),
        booleanValue: (value) => ({ booleanValue: value }),
        doubleValue: (value) => ({ doubleValue: (0, smithy_client_1.serializeFloat)(value) }),
        isNull: (value) => ({ isNull: value }),
        longValue: (value) => ({ longValue: value }),
        stringValue: (value) => ({ stringValue: value }),
        _: (name, value) => ({ name: value }),
    });
};
const serializeAws_restJson1LongArray = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1ResultSetOptions = (input, context) => {
    return {
        ...(input.decimalReturnType != null && { decimalReturnType: input.decimalReturnType }),
        ...(input.longReturnType != null && { longReturnType: input.longReturnType }),
    };
};
const serializeAws_restJson1SqlParameter = (input, context) => {
    return {
        ...(input.name != null && { name: input.name }),
        ...(input.typeHint != null && { typeHint: input.typeHint }),
        ...(input.value != null && { value: serializeAws_restJson1Field(input.value, context) }),
    };
};
const serializeAws_restJson1SqlParameterSets = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1SqlParametersList(entry, context);
    });
};
const serializeAws_restJson1SqlParametersList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1SqlParameter(entry, context);
    });
};
const serializeAws_restJson1StringArray = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const deserializeAws_restJson1ArrayOfArray = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ArrayValue((0, smithy_client_1.expectUnion)(entry), context);
    });
    return retVal;
};
const deserializeAws_restJson1ArrayValue = (output, context) => {
    if (output.arrayValues != null) {
        return {
            arrayValues: deserializeAws_restJson1ArrayOfArray(output.arrayValues, context),
        };
    }
    if (output.booleanValues != null) {
        return {
            booleanValues: deserializeAws_restJson1BooleanArray(output.booleanValues, context),
        };
    }
    if (output.doubleValues != null) {
        return {
            doubleValues: deserializeAws_restJson1DoubleArray(output.doubleValues, context),
        };
    }
    if (output.longValues != null) {
        return {
            longValues: deserializeAws_restJson1LongArray(output.longValues, context),
        };
    }
    if (output.stringValues != null) {
        return {
            stringValues: deserializeAws_restJson1StringArray(output.stringValues, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const deserializeAws_restJson1ArrayValueList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Value((0, smithy_client_1.expectUnion)(entry), context);
    });
    return retVal;
};
const deserializeAws_restJson1BooleanArray = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectBoolean)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1ColumnMetadata = (output, context) => {
    return {
        arrayBaseColumnType: (0, smithy_client_1.expectInt32)(output.arrayBaseColumnType),
        isAutoIncrement: (0, smithy_client_1.expectBoolean)(output.isAutoIncrement),
        isCaseSensitive: (0, smithy_client_1.expectBoolean)(output.isCaseSensitive),
        isCurrency: (0, smithy_client_1.expectBoolean)(output.isCurrency),
        isSigned: (0, smithy_client_1.expectBoolean)(output.isSigned),
        label: (0, smithy_client_1.expectString)(output.label),
        name: (0, smithy_client_1.expectString)(output.name),
        nullable: (0, smithy_client_1.expectInt32)(output.nullable),
        precision: (0, smithy_client_1.expectInt32)(output.precision),
        scale: (0, smithy_client_1.expectInt32)(output.scale),
        schemaName: (0, smithy_client_1.expectString)(output.schemaName),
        tableName: (0, smithy_client_1.expectString)(output.tableName),
        type: (0, smithy_client_1.expectInt32)(output.type),
        typeName: (0, smithy_client_1.expectString)(output.typeName),
    };
};
const deserializeAws_restJson1DoubleArray = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.limitedParseDouble)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1Field = (output, context) => {
    if (output.arrayValue != null) {
        return {
            arrayValue: deserializeAws_restJson1ArrayValue((0, smithy_client_1.expectUnion)(output.arrayValue), context),
        };
    }
    if (output.blobValue != null) {
        return {
            blobValue: context.base64Decoder(output.blobValue),
        };
    }
    if ((0, smithy_client_1.expectBoolean)(output.booleanValue) !== undefined) {
        return { booleanValue: (0, smithy_client_1.expectBoolean)(output.booleanValue) };
    }
    if ((0, smithy_client_1.limitedParseDouble)(output.doubleValue) !== undefined) {
        return { doubleValue: (0, smithy_client_1.limitedParseDouble)(output.doubleValue) };
    }
    if ((0, smithy_client_1.expectBoolean)(output.isNull) !== undefined) {
        return { isNull: (0, smithy_client_1.expectBoolean)(output.isNull) };
    }
    if ((0, smithy_client_1.expectLong)(output.longValue) !== undefined) {
        return { longValue: (0, smithy_client_1.expectLong)(output.longValue) };
    }
    if ((0, smithy_client_1.expectString)(output.stringValue) !== undefined) {
        return { stringValue: (0, smithy_client_1.expectString)(output.stringValue) };
    }
    return { $unknown: Object.entries(output)[0] };
};
const deserializeAws_restJson1FieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Field((0, smithy_client_1.expectUnion)(entry), context);
    });
    return retVal;
};
const deserializeAws_restJson1LongArray = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectLong)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1Metadata = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ColumnMetadata(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1_Record = (output, context) => {
    return {
        values: output.values != null ? deserializeAws_restJson1Row(output.values, context) : undefined,
    };
};
const deserializeAws_restJson1Records = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1_Record(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ResultFrame = (output, context) => {
    return {
        records: output.records != null ? deserializeAws_restJson1Records(output.records, context) : undefined,
        resultSetMetadata: output.resultSetMetadata != null
            ? deserializeAws_restJson1ResultSetMetadata(output.resultSetMetadata, context)
            : undefined,
    };
};
const deserializeAws_restJson1ResultSetMetadata = (output, context) => {
    return {
        columnCount: (0, smithy_client_1.expectLong)(output.columnCount),
        columnMetadata: output.columnMetadata != null ? deserializeAws_restJson1Metadata(output.columnMetadata, context) : undefined,
    };
};
const deserializeAws_restJson1Row = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Value((0, smithy_client_1.expectUnion)(entry), context);
    });
    return retVal;
};
const deserializeAws_restJson1SqlRecords = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1FieldList(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1SqlStatementResult = (output, context) => {
    return {
        numberOfRecordsUpdated: (0, smithy_client_1.expectLong)(output.numberOfRecordsUpdated),
        resultFrame: output.resultFrame != null ? deserializeAws_restJson1ResultFrame(output.resultFrame, context) : undefined,
    };
};
const deserializeAws_restJson1SqlStatementResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1SqlStatementResult(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1StringArray = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1StructValue = (output, context) => {
    return {
        attributes: output.attributes != null ? deserializeAws_restJson1ArrayValueList(output.attributes, context) : undefined,
    };
};
const deserializeAws_restJson1UpdateResult = (output, context) => {
    return {
        generatedFields: output.generatedFields != null ? deserializeAws_restJson1FieldList(output.generatedFields, context) : undefined,
    };
};
const deserializeAws_restJson1UpdateResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1UpdateResult(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1Value = (output, context) => {
    if (output.arrayValues != null) {
        return {
            arrayValues: deserializeAws_restJson1ArrayValueList(output.arrayValues, context),
        };
    }
    if ((0, smithy_client_1.expectLong)(output.bigIntValue) !== undefined) {
        return { bigIntValue: (0, smithy_client_1.expectLong)(output.bigIntValue) };
    }
    if ((0, smithy_client_1.expectBoolean)(output.bitValue) !== undefined) {
        return { bitValue: (0, smithy_client_1.expectBoolean)(output.bitValue) };
    }
    if (output.blobValue != null) {
        return {
            blobValue: context.base64Decoder(output.blobValue),
        };
    }
    if ((0, smithy_client_1.limitedParseDouble)(output.doubleValue) !== undefined) {
        return { doubleValue: (0, smithy_client_1.limitedParseDouble)(output.doubleValue) };
    }
    if ((0, smithy_client_1.expectInt32)(output.intValue) !== undefined) {
        return { intValue: (0, smithy_client_1.expectInt32)(output.intValue) };
    }
    if ((0, smithy_client_1.expectBoolean)(output.isNull) !== undefined) {
        return { isNull: (0, smithy_client_1.expectBoolean)(output.isNull) };
    }
    if ((0, smithy_client_1.limitedParseFloat32)(output.realValue) !== undefined) {
        return { realValue: (0, smithy_client_1.limitedParseFloat32)(output.realValue) };
    }
    if ((0, smithy_client_1.expectString)(output.stringValue) !== undefined) {
        return { stringValue: (0, smithy_client_1.expectString)(output.stringValue) };
    }
    if (output.structValue != null) {
        return {
            structValue: deserializeAws_restJson1StructValue(output.structValue, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const deserializeMetadata = (output) => {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
