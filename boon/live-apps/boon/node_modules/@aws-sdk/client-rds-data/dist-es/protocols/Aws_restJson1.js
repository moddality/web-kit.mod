import { __assign, __awaiter, __generator } from "tslib";
import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, expectUnion as __expectUnion, limitedParseDouble as __limitedParseDouble, limitedParseFloat32 as __limitedParseFloat32, map as __map, serializeFloat as __serializeFloat, throwDefaultError, } from "@aws-sdk/smithy-client";
import { AccessDeniedException, ArrayValue, BadRequestException, Field, ForbiddenException, InternalServerErrorException, NotFoundException, ServiceUnavailableError, StatementTimeoutException, } from "../models/models_0";
import { RDSDataServiceException as __BaseException } from "../models/RDSDataServiceException";
export var serializeAws_restJson1BatchExecuteStatementCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/BatchExecute";
                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.database != null && { database: input.database })), (input.parameterSets != null && {
                    parameterSets: serializeAws_restJson1SqlParameterSets(input.parameterSets, context),
                })), (input.resourceArn != null && { resourceArn: input.resourceArn })), (input.schema != null && { schema: input.schema })), (input.secretArn != null && { secretArn: input.secretArn })), (input.sql != null && { sql: input.sql })), (input.transactionId != null && { transactionId: input.transactionId })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1BeginTransactionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/BeginTransaction";
                body = JSON.stringify(__assign(__assign(__assign(__assign({}, (input.database != null && { database: input.database })), (input.resourceArn != null && { resourceArn: input.resourceArn })), (input.schema != null && { schema: input.schema })), (input.secretArn != null && { secretArn: input.secretArn })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1CommitTransactionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/CommitTransaction";
                body = JSON.stringify(__assign(__assign(__assign({}, (input.resourceArn != null && { resourceArn: input.resourceArn })), (input.secretArn != null && { secretArn: input.secretArn })), (input.transactionId != null && { transactionId: input.transactionId })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ExecuteSqlCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/ExecuteSql";
                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign({}, (input.awsSecretStoreArn != null && { awsSecretStoreArn: input.awsSecretStoreArn })), (input.database != null && { database: input.database })), (input.dbClusterOrInstanceArn != null && { dbClusterOrInstanceArn: input.dbClusterOrInstanceArn })), (input.schema != null && { schema: input.schema })), (input.sqlStatements != null && { sqlStatements: input.sqlStatements })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1ExecuteStatementCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/Execute";
                body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.continueAfterTimeout != null && { continueAfterTimeout: input.continueAfterTimeout })), (input.database != null && { database: input.database })), (input.formatRecordsAs != null && { formatRecordsAs: input.formatRecordsAs })), (input.includeResultMetadata != null && { includeResultMetadata: input.includeResultMetadata })), (input.parameters != null && { parameters: serializeAws_restJson1SqlParametersList(input.parameters, context) })), (input.resourceArn != null && { resourceArn: input.resourceArn })), (input.resultSetOptions != null && {
                    resultSetOptions: serializeAws_restJson1ResultSetOptions(input.resultSetOptions, context),
                })), (input.schema != null && { schema: input.schema })), (input.secretArn != null && { secretArn: input.secretArn })), (input.sql != null && { sql: input.sql })), (input.transactionId != null && { transactionId: input.transactionId })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var serializeAws_restJson1RollbackTransactionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, hostname, _b, protocol, port, basePath, headers, resolvedPath, body;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port, basePath = _a.path;
                headers = {
                    "content-type": "application/json",
                };
                resolvedPath = "".concat((basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || "") + "/RollbackTransaction";
                body = JSON.stringify(__assign(__assign(__assign({}, (input.resourceArn != null && { resourceArn: input.resourceArn })), (input.secretArn != null && { secretArn: input.secretArn })), (input.transactionId != null && { transactionId: input.transactionId })));
                return [2, new __HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
export var deserializeAws_restJson1BatchExecuteStatementCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1BatchExecuteStatementCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.updateResults != null) {
                    contents.updateResults = deserializeAws_restJson1UpdateResults(data.updateResults, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1BatchExecuteStatementCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AccessDeniedException": return [3, 2];
                    case "com.amazonaws.rdsdata#AccessDeniedException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.rdsdata#BadRequestException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.rdsdata#ForbiddenException": return [3, 6];
                    case "InternalServerErrorException": return [3, 8];
                    case "com.amazonaws.rdsdata#InternalServerErrorException": return [3, 8];
                    case "ServiceUnavailableError": return [3, 10];
                    case "com.amazonaws.rdsdata#ServiceUnavailableError": return [3, 10];
                    case "StatementTimeoutException": return [3, 12];
                    case "com.amazonaws.rdsdata#StatementTimeoutException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableErrorResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1StatementTimeoutExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 15;
            case 15: return [2];
        }
    });
}); };
export var deserializeAws_restJson1BeginTransactionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1BeginTransactionCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.transactionId != null) {
                    contents.transactionId = __expectString(data.transactionId);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1BeginTransactionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AccessDeniedException": return [3, 2];
                    case "com.amazonaws.rdsdata#AccessDeniedException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.rdsdata#BadRequestException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.rdsdata#ForbiddenException": return [3, 6];
                    case "InternalServerErrorException": return [3, 8];
                    case "com.amazonaws.rdsdata#InternalServerErrorException": return [3, 8];
                    case "ServiceUnavailableError": return [3, 10];
                    case "com.amazonaws.rdsdata#ServiceUnavailableError": return [3, 10];
                    case "StatementTimeoutException": return [3, 12];
                    case "com.amazonaws.rdsdata#StatementTimeoutException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableErrorResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1StatementTimeoutExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 15;
            case 15: return [2];
        }
    });
}); };
export var deserializeAws_restJson1CommitTransactionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1CommitTransactionCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.transactionStatus != null) {
                    contents.transactionStatus = __expectString(data.transactionStatus);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1CommitTransactionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AccessDeniedException": return [3, 2];
                    case "com.amazonaws.rdsdata#AccessDeniedException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.rdsdata#BadRequestException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.rdsdata#ForbiddenException": return [3, 6];
                    case "InternalServerErrorException": return [3, 8];
                    case "com.amazonaws.rdsdata#InternalServerErrorException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.rdsdata#NotFoundException": return [3, 10];
                    case "ServiceUnavailableError": return [3, 12];
                    case "com.amazonaws.rdsdata#ServiceUnavailableError": return [3, 12];
                    case "StatementTimeoutException": return [3, 14];
                    case "com.amazonaws.rdsdata#StatementTimeoutException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ServiceUnavailableErrorResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1StatementTimeoutExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ExecuteSqlCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ExecuteSqlCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.sqlStatementResults != null) {
                    contents.sqlStatementResults = deserializeAws_restJson1SqlStatementResults(data.sqlStatementResults, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ExecuteSqlCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AccessDeniedException": return [3, 2];
                    case "com.amazonaws.rdsdata#AccessDeniedException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.rdsdata#BadRequestException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.rdsdata#ForbiddenException": return [3, 6];
                    case "InternalServerErrorException": return [3, 8];
                    case "com.amazonaws.rdsdata#InternalServerErrorException": return [3, 8];
                    case "ServiceUnavailableError": return [3, 10];
                    case "com.amazonaws.rdsdata#ServiceUnavailableError": return [3, 10];
                }
                return [3, 12];
            case 2: return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableErrorResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 13;
            case 13: return [2];
        }
    });
}); };
export var deserializeAws_restJson1ExecuteStatementCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1ExecuteStatementCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.columnMetadata != null) {
                    contents.columnMetadata = deserializeAws_restJson1Metadata(data.columnMetadata, context);
                }
                if (data.formattedRecords != null) {
                    contents.formattedRecords = __expectString(data.formattedRecords);
                }
                if (data.generatedFields != null) {
                    contents.generatedFields = deserializeAws_restJson1FieldList(data.generatedFields, context);
                }
                if (data.numberOfRecordsUpdated != null) {
                    contents.numberOfRecordsUpdated = __expectLong(data.numberOfRecordsUpdated);
                }
                if (data.records != null) {
                    contents.records = deserializeAws_restJson1SqlRecords(data.records, context);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1ExecuteStatementCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AccessDeniedException": return [3, 2];
                    case "com.amazonaws.rdsdata#AccessDeniedException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.rdsdata#BadRequestException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.rdsdata#ForbiddenException": return [3, 6];
                    case "InternalServerErrorException": return [3, 8];
                    case "com.amazonaws.rdsdata#InternalServerErrorException": return [3, 8];
                    case "ServiceUnavailableError": return [3, 10];
                    case "com.amazonaws.rdsdata#ServiceUnavailableError": return [3, 10];
                    case "StatementTimeoutException": return [3, 12];
                    case "com.amazonaws.rdsdata#StatementTimeoutException": return [3, 12];
                }
                return [3, 14];
            case 2: return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1ServiceUnavailableErrorResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1StatementTimeoutExceptionResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 15;
            case 15: return [2];
        }
    });
}); };
export var deserializeAws_restJson1RollbackTransactionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2, deserializeAws_restJson1RollbackTransactionCommandError(output, context)];
                }
                contents = map({
                    $metadata: deserializeMetadata(output),
                });
                _a = __expectNonNull;
                _b = __expectObject;
                return [4, parseBody(output.body, context)];
            case 1:
                data = _a.apply(void 0, [_b.apply(void 0, [_c.sent()]), "body"]);
                if (data.transactionStatus != null) {
                    contents.transactionStatus = __expectString(data.transactionStatus);
                }
                return [2, contents];
        }
    });
}); };
var deserializeAws_restJson1RollbackTransactionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {
    var parsedOutput, _a, errorCode, _b, parsedBody;
    var _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = [__assign({}, output)];
                _c = {};
                return [4, parseBody(output.body, context)];
            case 1:
                parsedOutput = __assign.apply(void 0, _a.concat([(_c.body = _d.sent(), _c)]));
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "AccessDeniedException": return [3, 2];
                    case "com.amazonaws.rdsdata#AccessDeniedException": return [3, 2];
                    case "BadRequestException": return [3, 4];
                    case "com.amazonaws.rdsdata#BadRequestException": return [3, 4];
                    case "ForbiddenException": return [3, 6];
                    case "com.amazonaws.rdsdata#ForbiddenException": return [3, 6];
                    case "InternalServerErrorException": return [3, 8];
                    case "com.amazonaws.rdsdata#InternalServerErrorException": return [3, 8];
                    case "NotFoundException": return [3, 10];
                    case "com.amazonaws.rdsdata#NotFoundException": return [3, 10];
                    case "ServiceUnavailableError": return [3, 12];
                    case "com.amazonaws.rdsdata#ServiceUnavailableError": return [3, 12];
                    case "StatementTimeoutException": return [3, 14];
                    case "com.amazonaws.rdsdata#StatementTimeoutException": return [3, 14];
                }
                return [3, 16];
            case 2: return [4, deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context)];
            case 3: throw _d.sent();
            case 4: return [4, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5: throw _d.sent();
            case 6: return [4, deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context)];
            case 7: throw _d.sent();
            case 8: return [4, deserializeAws_restJson1InternalServerErrorExceptionResponse(parsedOutput, context)];
            case 9: throw _d.sent();
            case 10: return [4, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11: throw _d.sent();
            case 12: return [4, deserializeAws_restJson1ServiceUnavailableErrorResponse(parsedOutput, context)];
            case 13: throw _d.sent();
            case 14: return [4, deserializeAws_restJson1StatementTimeoutExceptionResponse(parsedOutput, context)];
            case 15: throw _d.sent();
            case 16:
                parsedBody = parsedOutput.body;
                throwDefaultError({
                    output: output,
                    parsedBody: parsedBody,
                    exceptionCtor: __BaseException,
                    errorCode: errorCode,
                });
                _d.label = 17;
            case 17: return [2];
        }
    });
}); };
var map = __map;
var deserializeAws_restJson1AccessDeniedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new AccessDeniedException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1BadRequestExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new BadRequestException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1ForbiddenExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new ForbiddenException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1InternalServerErrorExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        exception = new InternalServerErrorException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1NotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new NotFoundException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1ServiceUnavailableErrorResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        exception = new ServiceUnavailableError(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var deserializeAws_restJson1StatementTimeoutExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {
    var contents, data, exception;
    return __generator(this, function (_a) {
        contents = map({});
        data = parsedOutput.body;
        if (data.dbConnectionId != null) {
            contents.dbConnectionId = __expectLong(data.dbConnectionId);
        }
        if (data.message != null) {
            contents.message = __expectString(data.message);
        }
        exception = new StatementTimeoutException(__assign({ $metadata: deserializeMetadata(parsedOutput) }, contents));
        return [2, __decorateServiceException(exception, parsedOutput.body)];
    });
}); };
var serializeAws_restJson1ArrayOfArray = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return serializeAws_restJson1ArrayValue(entry, context);
    });
};
var serializeAws_restJson1ArrayValue = function (input, context) {
    return ArrayValue.visit(input, {
        arrayValues: function (value) { return ({ arrayValues: serializeAws_restJson1ArrayOfArray(value, context) }); },
        booleanValues: function (value) { return ({ booleanValues: serializeAws_restJson1BooleanArray(value, context) }); },
        doubleValues: function (value) { return ({ doubleValues: serializeAws_restJson1DoubleArray(value, context) }); },
        longValues: function (value) { return ({ longValues: serializeAws_restJson1LongArray(value, context) }); },
        stringValues: function (value) { return ({ stringValues: serializeAws_restJson1StringArray(value, context) }); },
        _: function (name, value) { return ({ name: value }); },
    });
};
var serializeAws_restJson1BooleanArray = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var serializeAws_restJson1DoubleArray = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return __serializeFloat(entry);
    });
};
var serializeAws_restJson1Field = function (input, context) {
    return Field.visit(input, {
        arrayValue: function (value) { return ({ arrayValue: serializeAws_restJson1ArrayValue(value, context) }); },
        blobValue: function (value) { return ({ blobValue: context.base64Encoder(value) }); },
        booleanValue: function (value) { return ({ booleanValue: value }); },
        doubleValue: function (value) { return ({ doubleValue: __serializeFloat(value) }); },
        isNull: function (value) { return ({ isNull: value }); },
        longValue: function (value) { return ({ longValue: value }); },
        stringValue: function (value) { return ({ stringValue: value }); },
        _: function (name, value) { return ({ name: value }); },
    });
};
var serializeAws_restJson1LongArray = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var serializeAws_restJson1ResultSetOptions = function (input, context) {
    return __assign(__assign({}, (input.decimalReturnType != null && { decimalReturnType: input.decimalReturnType })), (input.longReturnType != null && { longReturnType: input.longReturnType }));
};
var serializeAws_restJson1SqlParameter = function (input, context) {
    return __assign(__assign(__assign({}, (input.name != null && { name: input.name })), (input.typeHint != null && { typeHint: input.typeHint })), (input.value != null && { value: serializeAws_restJson1Field(input.value, context) }));
};
var serializeAws_restJson1SqlParameterSets = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return serializeAws_restJson1SqlParametersList(entry, context);
    });
};
var serializeAws_restJson1SqlParametersList = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return serializeAws_restJson1SqlParameter(entry, context);
    });
};
var serializeAws_restJson1StringArray = function (input, context) {
    return input
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        return entry;
    });
};
var deserializeAws_restJson1ArrayOfArray = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ArrayValue(__expectUnion(entry), context);
    });
    return retVal;
};
var deserializeAws_restJson1ArrayValue = function (output, context) {
    if (output.arrayValues != null) {
        return {
            arrayValues: deserializeAws_restJson1ArrayOfArray(output.arrayValues, context),
        };
    }
    if (output.booleanValues != null) {
        return {
            booleanValues: deserializeAws_restJson1BooleanArray(output.booleanValues, context),
        };
    }
    if (output.doubleValues != null) {
        return {
            doubleValues: deserializeAws_restJson1DoubleArray(output.doubleValues, context),
        };
    }
    if (output.longValues != null) {
        return {
            longValues: deserializeAws_restJson1LongArray(output.longValues, context),
        };
    }
    if (output.stringValues != null) {
        return {
            stringValues: deserializeAws_restJson1StringArray(output.stringValues, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
var deserializeAws_restJson1ArrayValueList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Value(__expectUnion(entry), context);
    });
    return retVal;
};
var deserializeAws_restJson1BooleanArray = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectBoolean(entry);
    });
    return retVal;
};
var deserializeAws_restJson1ColumnMetadata = function (output, context) {
    return {
        arrayBaseColumnType: __expectInt32(output.arrayBaseColumnType),
        isAutoIncrement: __expectBoolean(output.isAutoIncrement),
        isCaseSensitive: __expectBoolean(output.isCaseSensitive),
        isCurrency: __expectBoolean(output.isCurrency),
        isSigned: __expectBoolean(output.isSigned),
        label: __expectString(output.label),
        name: __expectString(output.name),
        nullable: __expectInt32(output.nullable),
        precision: __expectInt32(output.precision),
        scale: __expectInt32(output.scale),
        schemaName: __expectString(output.schemaName),
        tableName: __expectString(output.tableName),
        type: __expectInt32(output.type),
        typeName: __expectString(output.typeName),
    };
};
var deserializeAws_restJson1DoubleArray = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __limitedParseDouble(entry);
    });
    return retVal;
};
var deserializeAws_restJson1Field = function (output, context) {
    if (output.arrayValue != null) {
        return {
            arrayValue: deserializeAws_restJson1ArrayValue(__expectUnion(output.arrayValue), context),
        };
    }
    if (output.blobValue != null) {
        return {
            blobValue: context.base64Decoder(output.blobValue),
        };
    }
    if (__expectBoolean(output.booleanValue) !== undefined) {
        return { booleanValue: __expectBoolean(output.booleanValue) };
    }
    if (__limitedParseDouble(output.doubleValue) !== undefined) {
        return { doubleValue: __limitedParseDouble(output.doubleValue) };
    }
    if (__expectBoolean(output.isNull) !== undefined) {
        return { isNull: __expectBoolean(output.isNull) };
    }
    if (__expectLong(output.longValue) !== undefined) {
        return { longValue: __expectLong(output.longValue) };
    }
    if (__expectString(output.stringValue) !== undefined) {
        return { stringValue: __expectString(output.stringValue) };
    }
    return { $unknown: Object.entries(output)[0] };
};
var deserializeAws_restJson1FieldList = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Field(__expectUnion(entry), context);
    });
    return retVal;
};
var deserializeAws_restJson1LongArray = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectLong(entry);
    });
    return retVal;
};
var deserializeAws_restJson1Metadata = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ColumnMetadata(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1_Record = function (output, context) {
    return {
        values: output.values != null ? deserializeAws_restJson1Row(output.values, context) : undefined,
    };
};
var deserializeAws_restJson1Records = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1_Record(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1ResultFrame = function (output, context) {
    return {
        records: output.records != null ? deserializeAws_restJson1Records(output.records, context) : undefined,
        resultSetMetadata: output.resultSetMetadata != null
            ? deserializeAws_restJson1ResultSetMetadata(output.resultSetMetadata, context)
            : undefined,
    };
};
var deserializeAws_restJson1ResultSetMetadata = function (output, context) {
    return {
        columnCount: __expectLong(output.columnCount),
        columnMetadata: output.columnMetadata != null ? deserializeAws_restJson1Metadata(output.columnMetadata, context) : undefined,
    };
};
var deserializeAws_restJson1Row = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Value(__expectUnion(entry), context);
    });
    return retVal;
};
var deserializeAws_restJson1SqlRecords = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1FieldList(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1SqlStatementResult = function (output, context) {
    return {
        numberOfRecordsUpdated: __expectLong(output.numberOfRecordsUpdated),
        resultFrame: output.resultFrame != null ? deserializeAws_restJson1ResultFrame(output.resultFrame, context) : undefined,
    };
};
var deserializeAws_restJson1SqlStatementResults = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1SqlStatementResult(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1StringArray = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
var deserializeAws_restJson1StructValue = function (output, context) {
    return {
        attributes: output.attributes != null ? deserializeAws_restJson1ArrayValueList(output.attributes, context) : undefined,
    };
};
var deserializeAws_restJson1UpdateResult = function (output, context) {
    return {
        generatedFields: output.generatedFields != null ? deserializeAws_restJson1FieldList(output.generatedFields, context) : undefined,
    };
};
var deserializeAws_restJson1UpdateResults = function (output, context) {
    var retVal = (output || [])
        .filter(function (e) { return e != null; })
        .map(function (entry) {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1UpdateResult(entry, context);
    });
    return retVal;
};
var deserializeAws_restJson1Value = function (output, context) {
    if (output.arrayValues != null) {
        return {
            arrayValues: deserializeAws_restJson1ArrayValueList(output.arrayValues, context),
        };
    }
    if (__expectLong(output.bigIntValue) !== undefined) {
        return { bigIntValue: __expectLong(output.bigIntValue) };
    }
    if (__expectBoolean(output.bitValue) !== undefined) {
        return { bitValue: __expectBoolean(output.bitValue) };
    }
    if (output.blobValue != null) {
        return {
            blobValue: context.base64Decoder(output.blobValue),
        };
    }
    if (__limitedParseDouble(output.doubleValue) !== undefined) {
        return { doubleValue: __limitedParseDouble(output.doubleValue) };
    }
    if (__expectInt32(output.intValue) !== undefined) {
        return { intValue: __expectInt32(output.intValue) };
    }
    if (__expectBoolean(output.isNull) !== undefined) {
        return { isNull: __expectBoolean(output.isNull) };
    }
    if (__limitedParseFloat32(output.realValue) !== undefined) {
        return { realValue: __limitedParseFloat32(output.realValue) };
    }
    if (__expectString(output.stringValue) !== undefined) {
        return { stringValue: __expectString(output.stringValue) };
    }
    if (output.structValue != null) {
        return {
            structValue: deserializeAws_restJson1StructValue(output.structValue, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
var deserializeMetadata = function (output) {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
var collectBody = function (streamBody, context) {
    if (streamBody === void 0) { streamBody = new Uint8Array(); }
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
};
var isSerializableHeaderValue = function (value) {
    return value !== undefined &&
        value !== null &&
        value !== "" &&
        (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
        (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
};
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
var loadRestJsonErrorCode = function (output, data) {
    var findKey = function (object, key) { return Object.keys(object).find(function (k) { return k.toLowerCase() === key.toLowerCase(); }); };
    var sanitizeErrorCode = function (rawValue) {
        var cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    var headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
