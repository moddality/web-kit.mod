import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { RDSDataServiceException as __BaseException } from "./RDSDataServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare class BadRequestException extends __BaseException {
  readonly name: "BadRequestException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<BadRequestException, __BaseException>
  );
}
export declare enum TypeHint {
  DATE = "DATE",
  DECIMAL = "DECIMAL",
  JSON = "JSON",
  TIME = "TIME",
  TIMESTAMP = "TIMESTAMP",
  UUID = "UUID",
}
export declare class ForbiddenException extends __BaseException {
  readonly name: "ForbiddenException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
}
export declare class InternalServerErrorException extends __BaseException {
  readonly name: "InternalServerErrorException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>
  );
}
export declare class ServiceUnavailableError extends __BaseException {
  readonly name: "ServiceUnavailableError";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableError, __BaseException>
  );
}
export declare class StatementTimeoutException extends __BaseException {
  readonly name: "StatementTimeoutException";
  readonly $fault: "client";
  dbConnectionId?: number;
  constructor(
    opts: __ExceptionOptionType<StatementTimeoutException, __BaseException>
  );
}
export interface BeginTransactionRequest {
  resourceArn: string | undefined;
  secretArn: string | undefined;
  database?: string;
  schema?: string;
}
export interface BeginTransactionResponse {
  transactionId?: string;
}
export interface ColumnMetadata {
  name?: string;
  type?: number;
  typeName?: string;
  label?: string;
  schemaName?: string;
  tableName?: string;
  isAutoIncrement?: boolean;
  isSigned?: boolean;
  isCurrency?: boolean;
  isCaseSensitive?: boolean;
  nullable?: number;
  precision?: number;
  scale?: number;
  arrayBaseColumnType?: number;
}
export interface CommitTransactionRequest {
  resourceArn: string | undefined;
  secretArn: string | undefined;
  transactionId: string | undefined;
}
export interface CommitTransactionResponse {
  transactionStatus?: string;
}
export declare class NotFoundException extends __BaseException {
  readonly name: "NotFoundException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export declare enum DecimalReturnType {
  DOUBLE_OR_LONG = "DOUBLE_OR_LONG",
  STRING = "STRING",
}
export interface ExecuteSqlRequest {
  dbClusterOrInstanceArn: string | undefined;
  awsSecretStoreArn: string | undefined;
  sqlStatements: string | undefined;
  database?: string;
  schema?: string;
}
export interface ResultSetMetadata {
  columnCount?: number;
  columnMetadata?: ColumnMetadata[];
}
export declare enum RecordsFormatType {
  JSON = "JSON",
  NONE = "NONE",
}
export declare enum LongReturnType {
  LONG = "LONG",
  STRING = "STRING",
}
export interface ResultSetOptions {
  decimalReturnType?: DecimalReturnType | string;
  longReturnType?: LongReturnType | string;
}
export interface RollbackTransactionRequest {
  resourceArn: string | undefined;
  secretArn: string | undefined;
  transactionId: string | undefined;
}
export interface RollbackTransactionResponse {
  transactionStatus?: string;
}
export declare type ArrayValue =
  | ArrayValue.ArrayValuesMember
  | ArrayValue.BooleanValuesMember
  | ArrayValue.DoubleValuesMember
  | ArrayValue.LongValuesMember
  | ArrayValue.StringValuesMember
  | ArrayValue.$UnknownMember;
export declare namespace ArrayValue {
  interface BooleanValuesMember {
    booleanValues: boolean[];
    longValues?: never;
    doubleValues?: never;
    stringValues?: never;
    arrayValues?: never;
    $unknown?: never;
  }
  interface LongValuesMember {
    booleanValues?: never;
    longValues: number[];
    doubleValues?: never;
    stringValues?: never;
    arrayValues?: never;
    $unknown?: never;
  }
  interface DoubleValuesMember {
    booleanValues?: never;
    longValues?: never;
    doubleValues: number[];
    stringValues?: never;
    arrayValues?: never;
    $unknown?: never;
  }
  interface StringValuesMember {
    booleanValues?: never;
    longValues?: never;
    doubleValues?: never;
    stringValues: string[];
    arrayValues?: never;
    $unknown?: never;
  }
  interface ArrayValuesMember {
    booleanValues?: never;
    longValues?: never;
    doubleValues?: never;
    stringValues?: never;
    arrayValues: ArrayValue[];
    $unknown?: never;
  }
  interface $UnknownMember {
    booleanValues?: never;
    longValues?: never;
    doubleValues?: never;
    stringValues?: never;
    arrayValues?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    booleanValues: (value: boolean[]) => T;
    longValues: (value: number[]) => T;
    doubleValues: (value: number[]) => T;
    stringValues: (value: string[]) => T;
    arrayValues: (value: ArrayValue[]) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ArrayValue, visitor: Visitor<T>) => T;
}
export declare type Field =
  | Field.ArrayValueMember
  | Field.BlobValueMember
  | Field.BooleanValueMember
  | Field.DoubleValueMember
  | Field.IsNullMember
  | Field.LongValueMember
  | Field.StringValueMember
  | Field.$UnknownMember;
export declare namespace Field {
  interface IsNullMember {
    isNull: boolean;
    booleanValue?: never;
    longValue?: never;
    doubleValue?: never;
    stringValue?: never;
    blobValue?: never;
    arrayValue?: never;
    $unknown?: never;
  }
  interface BooleanValueMember {
    isNull?: never;
    booleanValue: boolean;
    longValue?: never;
    doubleValue?: never;
    stringValue?: never;
    blobValue?: never;
    arrayValue?: never;
    $unknown?: never;
  }
  interface LongValueMember {
    isNull?: never;
    booleanValue?: never;
    longValue: number;
    doubleValue?: never;
    stringValue?: never;
    blobValue?: never;
    arrayValue?: never;
    $unknown?: never;
  }
  interface DoubleValueMember {
    isNull?: never;
    booleanValue?: never;
    longValue?: never;
    doubleValue: number;
    stringValue?: never;
    blobValue?: never;
    arrayValue?: never;
    $unknown?: never;
  }
  interface StringValueMember {
    isNull?: never;
    booleanValue?: never;
    longValue?: never;
    doubleValue?: never;
    stringValue: string;
    blobValue?: never;
    arrayValue?: never;
    $unknown?: never;
  }
  interface BlobValueMember {
    isNull?: never;
    booleanValue?: never;
    longValue?: never;
    doubleValue?: never;
    stringValue?: never;
    blobValue: Uint8Array;
    arrayValue?: never;
    $unknown?: never;
  }
  interface ArrayValueMember {
    isNull?: never;
    booleanValue?: never;
    longValue?: never;
    doubleValue?: never;
    stringValue?: never;
    blobValue?: never;
    arrayValue: ArrayValue;
    $unknown?: never;
  }
  interface $UnknownMember {
    isNull?: never;
    booleanValue?: never;
    longValue?: never;
    doubleValue?: never;
    stringValue?: never;
    blobValue?: never;
    arrayValue?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    isNull: (value: boolean) => T;
    booleanValue: (value: boolean) => T;
    longValue: (value: number) => T;
    doubleValue: (value: number) => T;
    stringValue: (value: string) => T;
    blobValue: (value: Uint8Array) => T;
    arrayValue: (value: ArrayValue) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: Field, visitor: Visitor<T>) => T;
}
export interface SqlParameter {
  name?: string;
  value?: Field;
  typeHint?: TypeHint | string;
}
export interface UpdateResult {
  generatedFields?: Field[];
}
export declare type Value =
  | Value.ArrayValuesMember
  | Value.BigIntValueMember
  | Value.BitValueMember
  | Value.BlobValueMember
  | Value.DoubleValueMember
  | Value.IntValueMember
  | Value.IsNullMember
  | Value.RealValueMember
  | Value.StringValueMember
  | Value.StructValueMember
  | Value.$UnknownMember;
export declare namespace Value {
  interface IsNullMember {
    isNull: boolean;
    bitValue?: never;
    bigIntValue?: never;
    intValue?: never;
    doubleValue?: never;
    realValue?: never;
    stringValue?: never;
    blobValue?: never;
    arrayValues?: never;
    structValue?: never;
    $unknown?: never;
  }
  interface BitValueMember {
    isNull?: never;
    bitValue: boolean;
    bigIntValue?: never;
    intValue?: never;
    doubleValue?: never;
    realValue?: never;
    stringValue?: never;
    blobValue?: never;
    arrayValues?: never;
    structValue?: never;
    $unknown?: never;
  }
  interface BigIntValueMember {
    isNull?: never;
    bitValue?: never;
    bigIntValue: number;
    intValue?: never;
    doubleValue?: never;
    realValue?: never;
    stringValue?: never;
    blobValue?: never;
    arrayValues?: never;
    structValue?: never;
    $unknown?: never;
  }
  interface IntValueMember {
    isNull?: never;
    bitValue?: never;
    bigIntValue?: never;
    intValue: number;
    doubleValue?: never;
    realValue?: never;
    stringValue?: never;
    blobValue?: never;
    arrayValues?: never;
    structValue?: never;
    $unknown?: never;
  }
  interface DoubleValueMember {
    isNull?: never;
    bitValue?: never;
    bigIntValue?: never;
    intValue?: never;
    doubleValue: number;
    realValue?: never;
    stringValue?: never;
    blobValue?: never;
    arrayValues?: never;
    structValue?: never;
    $unknown?: never;
  }
  interface RealValueMember {
    isNull?: never;
    bitValue?: never;
    bigIntValue?: never;
    intValue?: never;
    doubleValue?: never;
    realValue: number;
    stringValue?: never;
    blobValue?: never;
    arrayValues?: never;
    structValue?: never;
    $unknown?: never;
  }
  interface StringValueMember {
    isNull?: never;
    bitValue?: never;
    bigIntValue?: never;
    intValue?: never;
    doubleValue?: never;
    realValue?: never;
    stringValue: string;
    blobValue?: never;
    arrayValues?: never;
    structValue?: never;
    $unknown?: never;
  }
  interface BlobValueMember {
    isNull?: never;
    bitValue?: never;
    bigIntValue?: never;
    intValue?: never;
    doubleValue?: never;
    realValue?: never;
    stringValue?: never;
    blobValue: Uint8Array;
    arrayValues?: never;
    structValue?: never;
    $unknown?: never;
  }
  interface ArrayValuesMember {
    isNull?: never;
    bitValue?: never;
    bigIntValue?: never;
    intValue?: never;
    doubleValue?: never;
    realValue?: never;
    stringValue?: never;
    blobValue?: never;
    arrayValues: Value[];
    structValue?: never;
    $unknown?: never;
  }
  interface StructValueMember {
    isNull?: never;
    bitValue?: never;
    bigIntValue?: never;
    intValue?: never;
    doubleValue?: never;
    realValue?: never;
    stringValue?: never;
    blobValue?: never;
    arrayValues?: never;
    structValue: StructValue;
    $unknown?: never;
  }
  interface $UnknownMember {
    isNull?: never;
    bitValue?: never;
    bigIntValue?: never;
    intValue?: never;
    doubleValue?: never;
    realValue?: never;
    stringValue?: never;
    blobValue?: never;
    arrayValues?: never;
    structValue?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    isNull: (value: boolean) => T;
    bitValue: (value: boolean) => T;
    bigIntValue: (value: number) => T;
    intValue: (value: number) => T;
    doubleValue: (value: number) => T;
    realValue: (value: number) => T;
    stringValue: (value: string) => T;
    blobValue: (value: Uint8Array) => T;
    arrayValues: (value: Value[]) => T;
    structValue: (value: StructValue) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: Value, visitor: Visitor<T>) => T;
}
export interface ExecuteStatementRequest {
  resourceArn: string | undefined;
  secretArn: string | undefined;
  sql: string | undefined;
  database?: string;
  schema?: string;
  parameters?: SqlParameter[];
  transactionId?: string;
  includeResultMetadata?: boolean;
  continueAfterTimeout?: boolean;
  resultSetOptions?: ResultSetOptions;
  formatRecordsAs?: RecordsFormatType | string;
}
export interface StructValue {
  attributes?: Value[];
}
export interface BatchExecuteStatementRequest {
  resourceArn: string | undefined;
  secretArn: string | undefined;
  sql: string | undefined;
  database?: string;
  schema?: string;
  parameterSets?: SqlParameter[][];
  transactionId?: string;
}
export interface BatchExecuteStatementResponse {
  updateResults?: UpdateResult[];
}
export interface _Record {
  values?: Value[];
}
export interface ExecuteStatementResponse {
  records?: Field[][];
  columnMetadata?: ColumnMetadata[];
  numberOfRecordsUpdated?: number;
  generatedFields?: Field[];
  formattedRecords?: string;
}
export interface ResultFrame {
  resultSetMetadata?: ResultSetMetadata;
  records?: _Record[];
}
export interface SqlStatementResult {
  resultFrame?: ResultFrame;
  numberOfRecordsUpdated?: number;
}
export interface ExecuteSqlResponse {
  sqlStatementResults?: SqlStatementResult[];
}
export declare const BeginTransactionRequestFilterSensitiveLog: (
  obj: BeginTransactionRequest
) => any;
export declare const BeginTransactionResponseFilterSensitiveLog: (
  obj: BeginTransactionResponse
) => any;
export declare const ColumnMetadataFilterSensitiveLog: (
  obj: ColumnMetadata
) => any;
export declare const CommitTransactionRequestFilterSensitiveLog: (
  obj: CommitTransactionRequest
) => any;
export declare const CommitTransactionResponseFilterSensitiveLog: (
  obj: CommitTransactionResponse
) => any;
export declare const ExecuteSqlRequestFilterSensitiveLog: (
  obj: ExecuteSqlRequest
) => any;
export declare const ResultSetMetadataFilterSensitiveLog: (
  obj: ResultSetMetadata
) => any;
export declare const ResultSetOptionsFilterSensitiveLog: (
  obj: ResultSetOptions
) => any;
export declare const RollbackTransactionRequestFilterSensitiveLog: (
  obj: RollbackTransactionRequest
) => any;
export declare const RollbackTransactionResponseFilterSensitiveLog: (
  obj: RollbackTransactionResponse
) => any;
export declare const ArrayValueFilterSensitiveLog: (obj: ArrayValue) => any;
export declare const FieldFilterSensitiveLog: (obj: Field) => any;
export declare const SqlParameterFilterSensitiveLog: (obj: SqlParameter) => any;
export declare const UpdateResultFilterSensitiveLog: (obj: UpdateResult) => any;
export declare const ValueFilterSensitiveLog: (obj: Value) => any;
export declare const ExecuteStatementRequestFilterSensitiveLog: (
  obj: ExecuteStatementRequest
) => any;
export declare const StructValueFilterSensitiveLog: (obj: StructValue) => any;
export declare const BatchExecuteStatementRequestFilterSensitiveLog: (
  obj: BatchExecuteStatementRequest
) => any;
export declare const BatchExecuteStatementResponseFilterSensitiveLog: (
  obj: BatchExecuteStatementResponse
) => any;
export declare const _RecordFilterSensitiveLog: (obj: _Record) => any;
export declare const ExecuteStatementResponseFilterSensitiveLog: (
  obj: ExecuteStatementResponse
) => any;
export declare const ResultFrameFilterSensitiveLog: (obj: ResultFrame) => any;
export declare const SqlStatementResultFilterSensitiveLog: (
  obj: SqlStatementResult
) => any;
export declare const ExecuteSqlResponseFilterSensitiveLog: (
  obj: ExecuteSqlResponse
) => any;
